
library("rjags")
library("runjags")
#library("invgamma")
library("SciViews")
library('plyr')
library("dplyr")
library('data.table')
library('matlib')
options(scipen=999)


SimulateAMonthOfAccrualTimes <- function( dPatsPerMonth , dStartMonth )
{
  nQtyPats    <- 1.2 *qpois(0.9999,dPatsPerMonth)
  vTimes      <- cumsum( rexp( nQtyPats, dPatsPerMonth ) )
  vTimes      <- vTimes[ vTimes < 1 ]
  vTimes      <- vTimes + dStartMonth
  return( vTimes )
}

SimulateArrivalTimes <- function( vPatsPerMonth, nMaxQtyPats )
{
  vTimes <- c()
  if( length( vPatsPerMonth ) == 1 )
  {
    vTimes <- cumsum(rexp(nMaxQtyPats ,vPatsPerMonth))
  }
  else
  {
    dStartMonth <- 0
    nMonth     <- 1
    while( length( vTimes ) < nMaxQtyPats  )
    {
      vTimes      <- c( vTimes, SimulateAMonthOfAccrualTimes( vPatsPerMonth[ nMonth ], dStartMonth ))
      dStartMonth <- dStartMonth + 1

      if( nMonth < length( vPatsPerMonth ) )
        nMonth <- nMonth +  1
    }
    vTimes <- vTimes[ 1:nMaxQtyPats ]
  }
  return( vTimes )
}

SimulateOutcomeObservedTime <- function( vStartTime )
{
  vTimeToOutcome <-3 #rnorm( length( vStartTime ),2, 0.3)
  vObsTime <- vStartTime  + vTimeToOutcome
  return( vObsTime )
}

blockrand = function(blocksize,N,armn,armlabel){
  block = rep(1:ceiling(N/blocksize), each = blocksize)
  a1 = data.frame(block, rand=runif(length(block)), envelope= 1: length(block))
  a2 = a1[order(a1$block,a1$rand),]
  a2$arm = rep(armlabel,times = length(block)/armn)
  assign = a2[order(a2$envelope),]
  return(assign[,c("block","arm")])
}



pop<-function(vPatsPerMonth,nMaxQtyPats,enrollrate1){
  populationtotal<-SimulateArrivalTimes (vPatsPerMonth, nMaxQtyPats)

  vStartTime1<-rbinom(nMaxQtyPats,size=1,enrollrate1)
  vStartTime2<- cbind(vStartTime1,populationtotal)
  vStartTime3<-vStartTime2[vStartTime2[,1]==1,]
  return(list(populationtotal,length(populationtotal),as.vector(vStartTime3[,2])))
}


enrollratef<-1
perctp<-0.5
perctt1<-c(0,0.1,0.2,0.3,0.4,0.5)
####################


jj=1
#x=1
N2=1000

parameters = c('aS','bA','bS','bM','aSBS' )
adaptSteps = 1000
burnInSteps = 2000

# intercept1<-c(0.2,0.35)
# aaa<-c(0.2,0.2,0.2,0.3,0.3)
# sss<-c(0.2,0.2,0.1)
# mmm<-c(0.2,0.15)
# interaction1<-c(0.2,0.35)

levellab<- c('S1-A1-S1-M1','S1-A1-S1-M2','S1-A1-S2-M1','S1-A1-S2-M2','S1-A1-S3-M1','S1-A1-S3-M2',
             'S1-A2-S1-M1','S1-A2-S1-M2','S1-A2-S2-M1','S1-A2-S2-M2','S1-A2-S3-M1','S1-A2-S3-M2',
             'S1-A3-S1-M1','S1-A3-S1-M2','S1-A3-S2-M1','S1-A3-S2-M2','S1-A3-S3-M1','S1-A3-S3-M2',
             'S1-A4-S1-M1','S1-A4-S1-M2','S1-A4-S2-M1','S1-A4-S2-M2','S1-A4-S3-M1','S1-A4-S3-M2',
             'S1-A5-S1-M1','S1-A5-S2-M1','S1-A5-S3-M1',
             'S2-A1-S1-M1','S2-A1-S1-M2','S2-A1-S2-M1','S2-A1-S2-M2','S2-A1-S3-M1','S2-A1-S3-M2',
             'S2-A2-S1-M1','S2-A2-S1-M2','S2-A2-S2-M1','S2-A2-S2-M2','S2-A2-S3-M1','S2-A2-S3-M2',
             'S2-A3-S1-M1','S2-A3-S1-M2','S2-A3-S2-M1','S2-A3-S2-M2','S2-A3-S3-M1','S2-A3-S3-M2',
             'S2-A4-S1-M1','S2-A4-S1-M2','S2-A4-S2-M1','S2-A4-S2-M2','S2-A4-S3-M1','S2-A4-S3-M2',
             'S2-A5-S1-M1','S2-A5-S2-M1','S2-A5-S3-M1')
levelss<- c('non-shock','shock')

remapfun<-function(x,intercept1,aaa,sss,mmm,interaction1){

  N2=1000
  repn<-1000
  sim11<-pop(vPatsPerMonth=119,nMaxQtyPats=200000,enrollrate1=1)#})
  vStartTime<-sort(sim11[[3]][1:N2], decreasing = FALSE)
  vOutcomeTime<-SimulateOutcomeObservedTime(vStartTime)

data1<-matrix(NA_real_,nrow=N2,ncol=10)
data1[,1]<-1:N2
data1[,2]<-vStartTime
data1[,3]<-vOutcomeTime
assign1<-blockrand(blocksize=27*2*2,N2,armn=27*2,armlabel=levellab)
armleft<-levellab

data1[,4]<-assign1$arm[1:N2]
data1[,5]<-as.numeric(factor(assign1$arm[1:N2],levels =levellab))#as.numeric(factor(assign1$arm[1:total],levels =levellab))
data1[,6]<-as.numeric( substr(data1[,4], start = 2, stop =2))

data1[,7]<- as.numeric( substr(data1[,4], start = 5, stop =5))
data1[,8]<- as.numeric( substr(data1[,4], start = 8, stop =8))
data1[,9]<- as.numeric( substr(data1[,4], start = 11, stop =11))


for (i in 1:N2){
  if (data1[i,6]==1 & data1[i,8]==2 ){
    p<-exp(intercept1[data1[i,6]]+aaa[data1[i,7]]+sss[data1[i,8]]+mmm[data1[i,9]]+interaction1[1])/(1+exp(intercept1[data1[i,6]]+aaa[data1[i,7]]+sss[data1[i,8]]+mmm[data1[i,9]]+interaction1[1]))
    data1[i,10]=rbinom(1,1,p)
  }else if (data1[i,6]==1 & data1[i,8]==3 ){
    p<-exp(intercept1[data1[i,6]]+aaa[data1[i,7]]+sss[data1[i,8]]+mmm[data1[i,9]]+interaction1[2])/(1+exp(intercept1[data1[i,6]]+aaa[data1[i,7]]+sss[data1[i,8]]+mmm[data1[i,9]]+interaction1[2]))
    data1[i,10]=rbinom(1,1,p)
  }  else {
    p<-exp(intercept1[data1[i,6]]+aaa[data1[i,7]]+sss[data1[i,8]]+mmm[data1[i,9]])/(1+exp(intercept1[data1[i,6]]+aaa[data1[i,7]]+sss[data1[i,8]]+mmm[data1[i,9]]))
    data1[i,10]=rbinom(1,1,p)
  }
 # p<-exp(intercept[data1[i,6]]+aaa[data1[i,7]]+sss[data1[i,8]]+mmm[data1[i,9]])/(1+exp(intercept[data1[i,6]]+aaa[data1[i,7]]+sss[data1[i,8]]+mmm[data1[i,9]]))
 # data1[i,10]=rbinom(1,1,p)
}
#for (i in 1:N2){#for (i in 1:total){


  # if (data1[i,6]==1 & data1[i,7]==1 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.2) # 1 is death
  # }else if (data1[i,6]==2 & data1[i,7]==1 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.35)
  # }else if (data1[i,6]==1 & data1[i,7]==2 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.18) # 1 is death
  # }else if (data1[i,6]==2 & data1[i,7]==2 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.33)
  # } else if (data1[i,6]==1 & data1[i,7]==3 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.2)
  # }else if (data1[i,6]==2 & data1[i,7]==3 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.35)
  # }else if (data1[i,6]==1 & data1[i,7]==4 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.2)
  # }else if (data1[i,6]==2 & data1[i,7]==4 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.35)
  # }else if (data1[i,6]==1 & data1[i,7]==5 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.2)
  # }else if (data1[i,6]==2 & data1[i,7]==5 & data1[i,8]==1 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.35)
  # }else if (data1[i,6]==1 & data1[i,7]==1 & data1[i,8]==1 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==1 & data1[i,8]==1 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==2 & data1[i,8]==1 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.17)
  # }else if (data1[i,6]==2 & data1[i,7]==2 & data1[i,8]==1 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.3)
  # }else if (data1[i,6]==1 & data1[i,7]==3 & data1[i,8]==1 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==3 & data1[i,8]==1 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==4 & data1[i,8]==1 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==4 & data1[i,8]==1 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==1 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==1 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==2 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.17)
  # }else if (data1[i,6]==2 & data1[i,7]==2 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.3)
  # }else if (data1[i,6]==1 & data1[i,7]==3 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==3 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==4 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==4 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==5 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==5 & data1[i,8]==2 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==1 & data1[i,8]==2 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.17)
  # }else if (data1[i,6]==2 & data1[i,7]==1 & data1[i,8]==2 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.3)
  # }else if (data1[i,6]==1 & data1[i,7]==2 & data1[i,8]==2 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.15)
  # }else if (data1[i,6]==2 & data1[i,7]==2 & data1[i,8]==2 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.28)
  # }else if (data1[i,6]==1 & data1[i,7]==3 & data1[i,8]==2 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.17)
  # }else if (data1[i,6]==2 & data1[i,7]==3 & data1[i,8]==2 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.3)
  # }else if (data1[i,6]==1 & data1[i,7]==4 & data1[i,8]==2 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.17)
  # }else if (data1[i,6]==2 & data1[i,7]==4 & data1[i,8]==2 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.3)
  # }else if (data1[i,6]==1 & data1[i,7]==1 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.2)
  # }else if (data1[i,6]==2 & data1[i,7]==1 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.35)
  # }else if (data1[i,6]==1 & data1[i,7]==2 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==2 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==3 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.2)
  # }else if (data1[i,6]==2 & data1[i,7]==3 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.35)
  # }else if (data1[i,6]==1 & data1[i,7]==4 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.2)
  # }else if (data1[i,6]==2 & data1[i,7]==4 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.35)
  # }else if (data1[i,6]==1 & data1[i,7]==5 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.2)
  # }else if (data1[i,6]==2 & data1[i,7]==5 & data1[i,8]==3 & data1[i,9]==1){
  #   data1[i,10]=rbinom(1,1,0.35)
  # }else if (data1[i,6]==1 & data1[i,7]==1 & data1[i,8]==3 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==1 & data1[i,8]==3 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==2 & data1[i,8]==3 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.17)
  # }else if (data1[i,6]==2 & data1[i,7]==2 & data1[i,8]==3 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.3)
  # }else if (data1[i,6]==1 & data1[i,7]==3 & data1[i,8]==3 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==3 & data1[i,8]==3 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }else if (data1[i,6]==1 & data1[i,7]==4 & data1[i,8]==3 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.18)
  # }else if (data1[i,6]==2 & data1[i,7]==4 & data1[i,8]==3 & data1[i,9]==2){
  #   data1[i,10]=rbinom(1,1,0.33)
  # }
#}


data11<-as.data.frame(data1)
data11$V6<-factor(as.numeric(data11$V6))
data11$V7<-factor(as.numeric(data11$V7))
data11$V8<-factor(as.numeric(data11$V8))
data11$V9<-factor(as.numeric(data11$V9))
data11$V10<-as.numeric(data11$V10)
data11$V6 <- relevel(data11$V6, ref = 1)
data11$V7 <- relevel(data11$V7, ref = 5)
data11$V8 <- relevel(data11$V8, ref = 1)
data11$V9 <- relevel(data11$V9, ref = 1)
#likelihood
mod <- glm(V10 ~ 0+V6 +V7+V8+V9+V6*V8, family = "binomial", data =data11)
betahat<-summary(mod)$coefficients[,1]
#summary(mod)$cov.unscaled
V<-vcov(mod)


#prior
meanprior<-matrix(c(0,0,0,0,0,0,0,0,0,0,0),ncol=1)
tau2<-diag(x = 0, nrow=11, ncol=11, names = TRUE)
#diag(tau2)<-c(10,10,1,1,1,1,1,1,1,0.05^2,0.05^2)
diag(tau2)<-c(100,100,100,100,100,100,100,100,100,0.15^2,0.15^2)

mupo<-inv(inv(tau2) + inv(V)) %*% (inv(tau2) %*% meanprior +  inv(V)%*% betahat)
labels<-colnames(vcov(mod))
rownames(mupo)<-c('aS[1]','aS[2]','bA[1]','bA[2]','bA[3]','bA[4]','bS[2]','bS[3]',
                  'bM[2]', 'aSBS[2,2]','aSBS[2,3]')
sigma2po<-inv(inv(tau2) + inv(V))


modelstring = "
  model
  {

  for(i in 1:Ntotal) {
      y[i] ~ dbern(phi[i])
      logit(phi[i]) <-aS[xAS[i]]+bA[xA[i]]+bS[xS[i]]+bM[xM[i]]+aSBS[xAS[i],xS[i]]
    }


 aS[1] ~ dnorm(0,0.01)
 aS[2] ~ dnorm(0,0.01)


   bA[5]=0
  #  mu ~ dnorm(0,0.01) #dnorm(0,1)
  #  invTau2 ~ dgamma(0.125, 0.00281)
  #
  # for(s in 1:4){
  #  bA[s] ~ dnorm(mu, invTau2)
  # }

  for(s in 1:4){   #2:nbA
   bA[s] ~ dnorm(mu[s], invTau2[s])
   mu[s] ~ dnorm(0,1)
   invTau2[s] ~ dgamma(0.125, 0.00281)
  }

  bS[1]=0

  for(r in 2:3){
    bS[r] ~ dnorm(0, 0.01) #dnorm(0,1)
  }

  bM[1]=0
  bM[2]~ dnorm(0, 0.01) #dnorm(0,1)

  aSBS[1,1]=0
  aSBS[1,2]=0
  aSBS[1,3]=0

  aSBS[2,1]=0
  aSBS[2,2]~dnorm(0,1/0.15/0.15)#normal(0,0.05)
  aSBS[2,3]~dnorm(0,1/0.15/0.15)#normal(0,0.05)
}
"
writeLines(modelstring,con="TEMPmodel.txt")


y = as.numeric(data1[,10])
xA = as.numeric(data1[,7])
xS = as.numeric(data1[,8])
xM = as.numeric(data1[,9])
xAS = as.numeric(data1[,6])#shock
Ntotal = nrow( data1)


dataList = list(
  y = y ,
  xAS = xAS,
  xA = xA ,
  xS = xS ,
  xM = xM ,
  Ntotal = Ntotal
)


model <- jags.model( textConnection(modelstring),
                     dataList,
                     n.chains = 4,
                     n.adapt= 5000)#5000
update(model, 5000); #5000

mcmc_samples <- coda.samples(model, parameters, n.iter=25000)#25000
model1<-summary(mcmc_samples)
model2<-as.matrix(model1$statistics)[,1:2]


result<-merge(mupo, model2, by = "row.names", all = TRUE)

return(result)
}

# intercept1<-c(0.2,0.35)
# aaa<-c(0.2,0.2,0.2,0.3,0.3)
# sss<-c(0.2,0.2,0.1)
# mmm<-c(0.2,0.15)

sim1a<-lapply(1:1000,function(x){
  print(x)
  remapfun(x=x,intercept1=c(0.2,0.35),aaa=c(),sss=c(),mmm=c(),interaction1=c())})



plotfun_remap<-function(varlabel,type,plotlabel){
  dataaa<-matrix(NA_real_,nrow=1000,ncol=2)

  indexx<-which(sim1a[[x]]$Row.names==varlabel)
  for (x in 1:1000){
    dataaa[x,1]<-sim1a[[x]]$V1[indexx]
    dataaa[x,2]<-sim1a[[x]]$Mean[indexx]
  }

  dataaa<-as.data.frame(dataaa)
  dataaa$V3<-(dataaa$V1+dataaa$V2)/2
  dataaa$V4<-(dataaa$V1-dataaa$V2)

  if (type=='scatterplot1'){

    ggplot( dataaa, aes(x=V1,y=V2)) + geom_point()+
      theme_classic()+xlab('Conjugate analysis of LR. Results')+ylab('Rjags Results')+
      ggtitle(plotlabel)

  }else if (type=='scatterplot2'){
    ggplot( dataaa, aes(x=V3,y=V4)) + geom_point()+
      theme_classic()+xlab('(Conjugate analysis of LR. Results + Rjags Results)/2')+ylab('Conjugate analysis of LR. Results - Rjags Results')+
      ggtitle(plotlabel)
  }

}

plotfun_remap1<-function(type,top1,path1){
  plot1<-plotfun_remap(varlabel='aS[1]',type=type,plotlabel='Intercept1')
  plot2<-plotfun_remap(varlabel='aS[2]',type=type,plotlabel='Intercept2')
  plot3<-plotfun_remap(varlabel='aSBS[2,2]',type=type,plotlabel='Interaction1')
  plot4<-plotfun_remap(varlabel='aSBS[2,3]',type=type,plotlabel='Interaction2')
  plot5<-plotfun_remap(varlabel='bA[1]',type=type,plotlabel='A1')
  plot6<-plotfun_remap(varlabel='bA[2]',type=type,plotlabel='A2')
  plot7<-plotfun_remap(varlabel='bA[3]',type=type,plotlabel='A3')
  plot8<-plotfun_remap(varlabel='bA[4]',type=type,plotlabel='A4')
  plot9<-plotfun_remap(varlabel='bM[2]',type=type,plotlabel='M2')
  plot10<-plotfun_remap(varlabel='bS[2]',type=type,plotlabel='S2')
  plot11<-plotfun_remap(varlabel='bS[3]',type=type,plotlabel='S3')


  ggsave(path1,width=10, height=15,grid.arrange(top=top1,
                                                plot1, plot2,plot3, plot4,plot5, plot6,plot7, plot8,plot9, plot10,
                                                plot11,  ncol=3, nrow=4))

}

library(gridExtra)
library(ggplot2)

plotfun_remap1(type='scatterplot1',
               top1=grid::grid.text(expression('Scatter Plot of Estimates with' ~ alpha[Intercept]==  ~ beta[A] ~ beta[M] ~ beta[S] ~ delta[Intercept])) ,#bquote('Scatter Plot of Estimates with' *\u03B1),# ~"\u03B2"[A]~ '\u03B2''M''\u03B2''S''\u03B4'),
                 #expression('Scatter Plot of Estimates with','\u03B1','\u03B2','A','\u03B2','M','\u03B2','S','\u03B4'),
               path1='C:/Users/cxu870/OneDrive - The University of Auckland/Desktop/remap_cap/plot/hypo1/scatterplot1.pdf')

plotfun_remap1(type='scatterplot2',
               top1=grid::grid.text(expression('Scatter Plot of Estimates with' ~ alpha[Intercept]==  ~ beta[A] ~ beta[M] ~ beta[S] ~ delta[Intercept])) ,#bquote('Scatter Plot of Estimates with' *\u03B1),# ~"\u03B2"[A]~ '\u03B2''M''\u03B2''S''\u03B4'),
               #expression('Scatter Plot of Estimates with','\u03B1','\u03B2','A','\u03B2','M','\u03B2','S','\u03B4'),
               path1='C:/Users/cxu870/OneDrive - The University of Auckland/Desktop/remap_cap/plot/hypo1/scatterplot2.pdf')


# as1<-matrix(NA_real_,nrow=1000,ncol=1)
# as2<-matrix(NA_real_,nrow=1000,ncol=1)
# as11<-matrix(NA_real_,nrow=1000,ncol=1)
# as21<-matrix(NA_real_,nrow=1000,ncol=1)
# asbs22<-matrix(NA_real_,nrow=1000,ncol=1)
# asbs23<-matrix(NA_real_,nrow=1000,ncol=1)
# asbs221<-matrix(NA_real_,nrow=1000,ncol=1)
# asbs231<-matrix(NA_real_,nrow=1000,ncol=1)
#
# a1<-matrix(NA_real_,nrow=1000,ncol=1)
# a2<-matrix(NA_real_,nrow=1000,ncol=1)
# a3<-matrix(NA_real_,nrow=1000,ncol=1)
# a4<-matrix(NA_real_,nrow=1000,ncol=1)
# a11<-matrix(NA_real_,nrow=1000,ncol=1)
# a21<-matrix(NA_real_,nrow=1000,ncol=1)
# a31<-matrix(NA_real_,nrow=1000,ncol=1)
# a41<-matrix(NA_real_,nrow=1000,ncol=1)
#
# m1<-matrix(NA_real_,nrow=1000,ncol=1)
# m11<-matrix(NA_real_,nrow=1000,ncol=1)
#
# s1<-matrix(NA_real_,nrow=1000,ncol=1)
# s11<-matrix(NA_real_,nrow=1000,ncol=1)
# s2<-matrix(NA_real_,nrow=1000,ncol=1)
# s21<-matrix(NA_real_,nrow=1000,ncol=1)
# for (x in 1:1000){
#   data1<-sim1a[[x]]
#   as1[x,]<-data1[data1$Row.names=='aS[1]','V1']
#   as2[x,]<-data1[data1$Row.names=='aS[2]','V1']
#   as11[x,]<-data1[data1$Row.names=='aS[1]','Mean']
#   as21[x,]<-data1[data1$Row.names=='aS[2]','Mean']
#
#   asbs22[x,]<-data1[data1$Row.names=='aSBS[2,2]','V1']
#   asbs23[x,]<-data1[data1$Row.names=='aSBS[2,3]','V1']
#   asbs221[x,]<-data1[data1$Row.names=='aSBS[2,2]','Mean']
#   asbs231[x,]<-data1[data1$Row.names=='aSBS[2,3]','Mean']
#
#   a1[x,]<-data1[data1$Row.names=='bA[1]','V1']
#   a2[x,]<-data1[data1$Row.names=='bA[2]','V1']
#   a3[x,]<-data1[data1$Row.names=='bA[3]','V1']
#   a4[x,]<-data1[data1$Row.names=='bA[4]','V1']
#   a11[x,]<-data1[data1$Row.names=='bA[1]','Mean']
#   a21[x,]<-data1[data1$Row.names=='bA[2]','Mean']
#   a31[x,]<-data1[data1$Row.names=='bA[3]','Mean']
#   a41[x,]<-data1[data1$Row.names=='bA[4]','Mean']
#
#   m1[x,]<-data1[data1$Row.names=='bM[2]','V1']
#   m11[x,]<-data1[data1$Row.names=='bM[2]','Mean']
#
#   s1[x,]<-data1[data1$Row.names=='bS[2]','V1']
#   s11[x,]<-data1[data1$Row.names=='bS[2]','Mean']
#   s2[x,]<-data1[data1$Row.names=='bS[3]','V1']
#   s21[x,]<-data1[data1$Row.names=='bS[3]','Mean']
# }
#
#
# result_sim<-matrix(NA_real_,nrow=11,ncol=3)
# result_sim[,1]<-c("aS[1]" ,"aS[2]" , "aSBS[2,2]", "aSBS[2,3]", "bA[1]" ,    "bA[2]" ,
#                   "bA[3]",     "bA[4]" ,    "bM[2]" ,     "bS[2]"  ,   "bS[3]"  )
#
# result_sim[1,2]<-  mean(as1)
# result_sim[2,2]<-  mean(as2)
# result_sim[1,3]<-  mean(as11)
# result_sim[2,3]<-  mean(as21)
#
# result_sim[3,2]<-  mean(asbs22)
# result_sim[4,2]<-  mean(asbs221)
# result_sim[3,3]<-  mean(asbs23)
# result_sim[4,3]<-  mean(asbs231)
#
#
# result_sim[5,2]<-  mean(a1)
# result_sim[6,2]<-  mean(a2)
# result_sim[7,2]<-  mean(a3)
# result_sim[8,2]<-  mean(a4)
# result_sim[5,3]<-  mean(a11)
# result_sim[6,3]<-  mean(a21)
# result_sim[7,3]<-  mean(a31)
# result_sim[8,3]<-  mean(a41)
#
#
# result_sim[9,2]<-  mean(m1)
# result_sim[9,3]<-  mean(m11)
#
# result_sim[10,2]<-  mean(s1)
# result_sim[10,3]<-  mean(s11)
# result_sim[11,2]<-  mean(s2)
# result_sim[11,3]<-  mean(s21)
