

library("tidyverse")
library("data.table")
library("cubature")
library("plyr")
options(scipen=999)

#### Functions adapted from http://github.com/kwathen/IntroBayesianSimulation.
#### SimulateAMonthOfAccrualTimes, SimulateArrivalTimes: These function simulates
#### a month of recruitment times.
#### SimulateOutcomeObservedTime: This function simulates the time the patient
#### outcomes are observed.
#### Note: The accrual time not necessarily to be a month, it could be a week
#### or whatever time frame it could be. But when the unit changes, the number in
#### vTimeToOutcome1 (eg: 1 and 0.2 in rnorm( length( vStartTime ),1, 0.2)) in
#### the SimulateOutcomeObservedTime should be changed as well.
#### Refer to the website for more details.

SimulateAMonthOfAccrualTimes <- function( dPatsPerMonth , dStartMonth )
{
  nQtyPats    <- 1.2 *qpois(0.9999,dPatsPerMonth)
  vTimes      <- cumsum( rexp( nQtyPats, dPatsPerMonth ) )
  vTimes      <- vTimes[ vTimes < 1 ]
  vTimes      <- vTimes + dStartMonth
  return( vTimes )
}

SimulateArrivalTimes <- function( vPatsPerMonth, nMaxQtyPats )
{
  vTimes <- c()
  if( length( vPatsPerMonth ) == 1 )
  {
    vTimes <- cumsum(rexp(nMaxQtyPats ,vPatsPerMonth))
  }
  else
  {
    dStartMonth <- 0
    nMonth     <- 1
    while( length( vTimes ) < nMaxQtyPats  )
    {
      vTimes      <- c( vTimes, SimulateAMonthOfAccrualTimes( vPatsPerMonth[ nMonth ], dStartMonth ))
      dStartMonth <- dStartMonth + 1

      if( nMonth < length( vPatsPerMonth ) )
        nMonth <- nMonth +  1
    }
    vTimes <- vTimes[ 1:nMaxQtyPats ]
  }
  return( vTimes )
}

SimulateOutcomeObservedTime <- function( vStartTime, vTimeToOutcome1)
{
  vTimeToOutcome <-eval(vTimeToOutcome1)
  vObsTime <- vStartTime  + vTimeToOutcome
  return( vObsTime )
}

#### Function of the simulated populations with return of the
#### start time of all patients, the maximal accrued number of patients and
#### start time of patients enrolled  in the trial.
#### vPatsPerMonth: the number of patients accrued within a certain time frame.
#### nMaxQtyPats: the maximal accrued number of patients having disease, this number
#### should be chosen carefully to make sure there are enough patients for the
#### calculation of patients in the population.
#### enrollrate: the probability that patients in the population can enroll into the trial.
pop<-function(vPatsPerMonth,nMaxQtyPats,enrollrate1){
  populationtotal<-SimulateArrivalTimes (vPatsPerMonth, nMaxQtyPats)
  vStartTime1<-rbinom(nMaxQtyPats,size=1,enrollrate1)
  vStartTime2<- cbind(vStartTime1,populationtotal)
  vStartTime3<-vStartTime2[vStartTime2[,1]==1,]
  return(list(populationtotal,length(populationtotal),as.vector(vStartTime3[,2])))
}

#### Function of the block randomization.
#### blocksize: size of the block.
#### N: number of patients to be equal randomized.
#### armn: number of treatment arms.
#### armlabel: names of treatment arms.
blockrand <- function(blocksize,N,armn,armlabel){
  block = rep(1:ceiling(N/blocksize), each = blocksize)
  a1 = data.frame(block, rand=runif(length(block)), envelope= 1: length(block))
  a2 = a1[order(a1$block,a1$rand),]
  a2$arm = rep(armlabel,times = length(block)/armn)
  assign = a2[order(a2$envelope),]
  return(assign[,c("block","arm")])
}

#### Function of the formula Pr(p_k>p_{control}+\delta|data_{t-1})<0.01,
#### which calculate the posterior probability of stopping a treatment arm
#### due to futility.
#### a: alpha of the treatment arm which is compared to the control arm.
#### b: beta of the treatment arm which is compared to the control arm.
#### A: alpha of the control arm.
#### B: beta of the control arm.
pgreater<-function(a, b,A,B, delta){
  f<-function(y){
    pbeta(y+delta,a,b,lower.tail=FALSE)*dbeta(y,A,B)
  }
  integrate(f,0,1, rel.tol = 1e-6, stop.on.error = FALSE)$value
}

#### Function of the formula Pr(p_k=max\{p_1,...,p_K\}), which calculate the
#### probability that posterior probability of arm k is maximal.
#### pmax1 is used for trials with 2 arms, pmax2 is used for trials with 3 arms,
#### pmax3 is used for trials with 4 arms, pmax4 is used for trials with 5 arms.
#### a1, a2, a3, a4: alpha of the different treatment arms compared to the other arm.
#### b1, b2, b3, b4: beta of the different treatment arms compared to the other arm.
#### A: alpha of the compared arm.
#### B: beta of the compared arm.
pmax1<-function(a1,b1,A,B){
  f<-function(y){
    (pbeta(y,a1,b1,lower.tail=TRUE))*dbeta(y,A,B)
  }
  integrate(f,0,1, rel.tol = 1e-6, stop.on.error = FALSE)$value
}

pmax2<-function(a1,b1,a2,b2,A,B){
  f<-function(y){
    pbeta(y,a1,b1,lower.tail=TRUE)*pbeta(y,a2,b2,lower.tail=TRUE)*
      dbeta(y,A,B)
  }
  integrate(f,0,1, rel.tol = 1e-6, stop.on.error = FALSE)$value
}

pmax3<-function(a1,b1,a2,b2,a3,b3,A,B){
  f<-function(y){
    pbeta(y,a1,b1,lower.tail=TRUE)*pbeta(y,a2,b2,lower.tail=TRUE)*
      pbeta(y,a3,b3,lower.tail=TRUE)*
      dbeta(y,A,B)
  }
  integrate(f,0,1, rel.tol = 1e-6, stop.on.error = FALSE)$value
}

pmax4<-function(a1,b1,a2,b2,a3,b3,a4,b4,A,B){
  f<-function(y){
    pbeta(y,a1,b1,lower.tail=TRUE)*pbeta(y,a2,b2,lower.tail=TRUE)*
      pbeta(y,a3,b3,lower.tail=TRUE)*pbeta(y,a4,b4,lower.tail=TRUE)*
      dbeta(y,A,B)
  }
  integrate(f,0,1, rel.tol = 1e-6, stop.on.error = FALSE)$value
}

#### Function of calculating the allocation probability of each arm in the trial,
#### this function calculates the posterior probability that arm k is maximal
#### considering the arms left in the trial.
#### alpha1-alpha5: alpha in prior distribution for treatment arm 1 to 5 with
#### 1 stands for the control.
#### beta1-beta5: beta in prior distribution for treatment arm 1 to 5 with
#### 1 stands for the control.
#### mat: intermediate variable from brarfun.
#### total: the number of patients with results available.
#### armleft: the arms left in the trial at current stage.
alofun<-function(alpha1,beta1,alpha2,beta2,alpha3,beta3,
                 alpha4,beta4,alpha5,beta5,mat,total,armleft){
  aloo<-vector("list",length(armleft))
  if (total>0){
    if (length(armleft)==2){
      aloo[[1]]<-pmax1(A=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       B=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       a1=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       b1=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])))
      aloo[[2]]<-1-aloo[[1]]

    }else if (length(armleft)==3){

      aloo[[1]]<-pmax2(A=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       B=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       a1=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       b1=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       a2=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       b2=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])))

      aloo[[2]]<-pmax2(a1=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       b1=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       A=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       B=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       a2=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       b2=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])))

      aloo[[3]]<-1-aloo[[1]]-aloo[[2]]

    }else if (length(armleft)==4){

      aloo[[1]]<-pmax3(A=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       B=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       a1=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       b1=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       a2=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       b2=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])),
                       a3=mat[[armleft[4]]][1,1]+get(sprintf("alpha%s",armleft[4])),
                       b3=mat[[armleft[4]]][1,2]+get(sprintf("beta%s",armleft[4])))

      aloo[[2]]<-pmax3(a1=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       b1=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       A=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       B=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       a2=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       b2=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])),
                       a3=mat[[armleft[4]]][1,1]+get(sprintf("alpha%s",armleft[4])),
                       b3=mat[[armleft[4]]][1,2]+get(sprintf("beta%s",armleft[4])))

      aloo[[3]]<-pmax3(a1=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       b1=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       a2=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       b2=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       A=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       B=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])),
                       a3=mat[[armleft[4]]][1,1]+get(sprintf("alpha%s",armleft[4])),
                       b3=mat[[armleft[4]]][1,2]+get(sprintf("beta%s",armleft[4])))

      aloo[[4]]<-1- aloo[[1]]-aloo[[2]]-aloo[[3]]

    }else if (length(armleft)==5){

      aloo[[1]]<-pmax4(A=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       B=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       a1=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       b1=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       a2=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       b2=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])),
                       a3=mat[[armleft[4]]][1,1]+get(sprintf("alpha%s",armleft[4])),
                       b3=mat[[armleft[4]]][1,2]+get(sprintf("beta%s",armleft[4])),
                       a4=mat[[armleft[5]]][1,1]+get(sprintf("alpha%s",armleft[5])),
                       b4=mat[[armleft[5]]][1,2]+get(sprintf("beta%s",armleft[5])))

      aloo[[2]]<-pmax4(a1=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       b1=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       A=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       B=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       a2=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       b2=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])),
                       a3=mat[[armleft[4]]][1,1]+get(sprintf("alpha%s",armleft[4])),
                       b3=mat[[armleft[4]]][1,2]+get(sprintf("beta%s",armleft[4])),
                       a4=mat[[armleft[5]]][1,1]+get(sprintf("alpha%s",armleft[5])),
                       b4=mat[[armleft[5]]][1,2]+get(sprintf("beta%s",armleft[5])))

      aloo[[3]]<-pmax4(a1=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       b1=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       a2=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       b2=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       A=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       B=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])),
                       a3=mat[[armleft[4]]][1,1]+get(sprintf("alpha%s",armleft[4])),
                       b3=mat[[armleft[4]]][1,2]+get(sprintf("beta%s",armleft[4])),
                       a4=mat[[armleft[5]]][1,1]+get(sprintf("alpha%s",armleft[5])),
                       b4=mat[[armleft[5]]][1,2]+get(sprintf("beta%s",armleft[5])))

      aloo[[4]]<-pmax4(a1=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                       b1=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                       a2=mat[[armleft[2]]][1,1]+get(sprintf("alpha%s",armleft[2])),
                       b2=mat[[armleft[2]]][1,2]+get(sprintf("beta%s",armleft[2])),
                       a3=mat[[armleft[3]]][1,1]+get(sprintf("alpha%s",armleft[3])),
                       b3=mat[[armleft[3]]][1,2]+get(sprintf("beta%s",armleft[3])),
                       A=mat[[armleft[4]]][1,1]+get(sprintf("alpha%s",armleft[4])),
                       B=mat[[armleft[4]]][1,2]+get(sprintf("beta%s",armleft[4])),
                       a4=mat[[armleft[5]]][1,1]+get(sprintf("alpha%s",armleft[5])),
                       b4=mat[[armleft[5]]][1,2]+get(sprintf("beta%s",armleft[5])))

      aloo[[5]]<-1-aloo[[1]]-aloo[[2]]-aloo[[3]]-aloo[[4]]
    }
  }else if (total==0 ){
    for(j in 1:length(aloo)){
      aloo[[j]]<-1/length(armleft)
    }
  }
  return(aloo)
}

#### Function of Bayesian Response Adaptive Randomization with a Control Arm
#### with return of a 5 column data set (patient ID number, enrolled time,
#### observed time of results, allocated treatment arm, patients' results),
#### decision of each arm, the number of patients enrolled at the decision
#### made time of each arm and the posterior probability of Pr(p_k>p_{control}+\delta|data_{t-1}).
#### datapop: data simulated from pop function.
#### jj: the index of the specified enroll rate.
#### x: the iteration number of the specified enroll rate.
#### N1: the number of patients in the burn-in period.
#### armn: total arms in the trial.
#### h: real probability for binomial distribution in data.
#### au: cut-off value of the final selection at the end of the trial.
#### N2: total sample size.
#### tp: tuning parameter.
#### armlabel: names of the treatment arms.
#### blocksize: size of the block for patients in the burn-in period for equal randomization.
#### alpha1-alpha5: alpha in prior distribution for treatment arm 1 to 5 with
#### 1 stands for the control.
#### beta1-beta5: beta in prior distribution for treatment arm 1 to 5 with
#### 1 stands for the control.
#### minstart: the number of patients when one starts to check decision rules.
#### deltaa: minimal effect expected to be observed.
#### tpp: the indicator of the formula with tp=n/2N.
brarfun<-function(datapop=sim11,jj,x,vTimeToOutcome1,N1,armn,h,N2,tp,armlabel,blocksize,
                  alpha1,beta1,alpha2,beta2,alpha3,beta3,
                  alpha4,beta4,alpha5,beta5,minstart,deltaa,tpp,deltaa1){

  vStartTime<-sort(datapop[[jj]][[x]][[3]][1:N2], decreasing = FALSE)
  vOutcomeTime<-SimulateOutcomeObservedTime(vStartTime,vTimeToOutcome1)
  assign1<-blockrand(blocksize,N1,armn,armlabel)

  data1<-matrix(NA_real_,nrow=N2,ncol=5)
  data1[,1]<-1:N2
  data1[,2]<-vStartTime
  data1[,3]<-vOutcomeTime
  data1[1:N1,4]<-assign1$arm[1:N1]

  for (i in 1:(N1)){
    for (j in 1:armn) {
      if (data1[i, 4]==j ){
        data1[i,5]<-rbinom(1,size=1,prob=h[[j]])
      }
    }
  }

  armleft<-c(1:armn)
  decision<-rep(NA,armn )
  phi<-rep(NA,armn )
  stopp<-rep(NA,armn )

  simout<-matrix(NA,nrow=N2,ncol=armn)
  for (jjj in minstart:N2){


    if (jjj>minstart){
      treat<-sample(armleft,size =1, prob = as.vector(pii))
      data1[jjj,4]<-treat
      data1[jjj,5]<-rbinom(1,size=1,prob=h[treat])
    }

    if (jjj<N2){
      total<-sum (as.numeric(data1[1:jjj,3])<=as.numeric(data1[jjj,2]))
    }else if (jjj==N2){
      total<-N2
    }

    result<-vector("list",length(armleft))
    mat<-vector("list",armn)

    for (j in 1:length(armleft)) {

      if (total>0){
        if (jjj!=N2){
          data2<-matrix(data1[which(as.numeric(data1[1:jjj,3])<=as.numeric(data1[jjj,2])),],ncol=5)
        }else if (jjj==N2){
          data2<-data1
        }
        #data2<-matrix(data1[which(as.numeric(data1[1:jjj,3])<=as.numeric(data1[jjj,2])),],ncol=5)
        #  data2<-matrix(data1[which(data1[1:jjj,3]<=data1[jjj,2]),],ncol=5)
        tot<-as.numeric(data2[which(data2[,4]==armleft[j]),5])
        mat[[armleft[j]]]<-matrix(c(sum(tot),length(tot) -sum(tot),length(tot)),nrow=1)
      }

    }

    if (length(armleft)>1){
      for (j in 1:length(armleft)){
        if (total>0){
          if (j>1){
            result[[j]]<-pgreater(A=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                                  B=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                                  a=mat[[armleft[j]]][1,1]+get(sprintf("alpha%s",armleft[j])),
                                  b=mat[[armleft[j]]][1,2]+get(sprintf("beta%s",armleft[j])),
                                  delta=deltaa)
          }else if (j==1){
            result[[1]]<-0
          }

        }else if (total==0 ){
          if (j>1){
            result[[j]]<-pgreater(A=get(sprintf("alpha%s",1)),
                                  B=get(sprintf("beta%s",1)),
                                  a=get(sprintf("alpha%s",armleft[j])),
                                  b=get(sprintf("beta%s",armleft[j])),
                                  delta=deltaa)
          }else if (j==1){
            result[[1]]<-0
          }
        }

      }

      aloo<-vector("list",length(armleft))
      aloo<-alofun(alpha1=alpha1,beta1=beta1,alpha2=alpha2,beta2=beta2,
                   alpha3=alpha3,beta3=beta3,alpha4=alpha4,beta4=beta4,
                   alpha5=alpha5,beta5=beta5,mat=mat,total=total,armleft=armleft)

    }

    if (jjj==N2){
      resultt<-vector("list",length(armleft))
      if (length(armleft)>1){
        for (j in 1:length(armleft)){
          if (total>0){
            if (j>1){
              resultt[[j]]<-pgreater(A=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
                                     B=mat[[1]][1,2]+get(sprintf("beta%s",1)),
                                     a=mat[[armleft[j]]][1,1]+get(sprintf("alpha%s",armleft[j])),
                                     b=mat[[armleft[j]]][1,2]+get(sprintf("beta%s",armleft[j])),
                                     delta=deltaa1)
            }else if (j==1){
              resultt[[1]]<-0
            }

          }else if (total==0 ){
            if (j>1){
              resultt[[j]]<-pgreater(A=get(sprintf("alpha%s",1)),
                                     B=get(sprintf("beta%s",1)),
                                     a=get(sprintf("alpha%s",armleft[j])),
                                     b=get(sprintf("beta%s",armleft[j])),
                                     delta=deltaa1)
            }else if (j==1){
              resultt[[1]]<-0
            }
          }

        }


      }
    }



    # if (length(armleft)>1 & deltaa!=0){
    #   posteriorp<-vector("list",length(armleft))
    #   for (j in 1:length(armleft)){
    #     if (total>0){
    #       if (j>1){
    #         posteriorp[[j]]<-pgreater(A=mat[[1]][1,1]+get(sprintf("alpha%s",1)),
    #                                   B=mat[[1]][1,2]+get(sprintf("beta%s",1)),
    #                                   a=mat[[armleft[j]]][1,1]+get(sprintf("alpha%s",armleft[j])),
    #                                   b=mat[[armleft[j]]][1,2]+get(sprintf("beta%s",armleft[j])),
    #                                   delta=0)
    #       }else if (j==1){
    #         posteriorp[[j]]<-0
    #       }
    #     }else if (total==0 ){
    #       if (j>1){
    #         posteriorp[[j]]<-pgreater(A=get(sprintf("alpha%s",1)),
    #                                   B=get(sprintf("beta%s",1)),
    #                                   a=get(sprintf("alpha%s",armleft[j])),
    #                                   b=get(sprintf("beta%s",armleft[j])),
    #                                   delta=0)
    #       }else if (j==1){
    #         posteriorp[[j]]<-0
    #       }
    #     }
    #   }
    # }
    #
    #
    # if (deltaa!=0){
    #   posteriorp1<-do.call(cbind,posteriorp)
    # }
    pii<-as.data.frame(do.call(cbind,aloo))
    colnames(pii)<-armleft
    if (jjj<N2){
      sim111<-do.call(cbind,result)
      colnames(sim111)<-armleft
      simout[jjj,]<-sim111
    } else if (jjj==N2) {
      sim111t<-do.call(cbind,resultt)
      colnames(sim111t)<-armleft
      simout[jjj,]<-sim111t
    }


    if ( jjj<N2){
      #for (k in 2:length(armleft)) {
      #   if (sim111[1,k]<0.01 & is.na(decision[armleft[k]]) ){#decision[armleft[k]] %in% NA
      #     decision[armleft[k]]<-'Futility'
      #     stopp[armleft[k]]<-jjj
      #     if (deltaa==0){
      #       phi[armleft[k]]<-sim111[1,k]
      #     }else if (deltaa!=0){
      #       phi[armleft[k]]<-posteriorp1[1,k]
      #     }
      #   }
      # }
      #
      # if ( 'Futility' %in% decision ){
      #   armleft<-armleft[! armleft %in%  which (decision %in%  'Futility')]
      #   pii<- select(pii,sprintf("%s",armleft))
      # }
      #
      # if((length(armleft)==1 & length( which (decision %in%  'Futility'))==(armn-1))){
      #   stopp[ which (is.na(decision))]<-jjj#decision %in%  NA
      #   data11<-data1[1:jjj,]
      #   if (is.na(decision[1])) {#decision[1] %in% NA
      #     decision[1]<-'Control Selected'
      #     if (deltaa==0){
      #       phi[1]<-sim111[1,1]
      #     }else if (deltaa!=0){
      #       phi[1]<-posteriorp1[1,1]
      #     }
      #   }
      #   sim1111<-matrix(NA,nrow=1,ncol=length(armleft))#
      #   colnames(sim1111)<-c(armleft)#
      #   return(list(sim1111))
      #   # return(list(data11[,4],data11[,5],decision,jjj,data11,stopp,phi))
      #   break
      # }

      for (yy in 1:length(armleft)){
        if ( pii[colnames(pii) %in%  armleft[yy]]<0.1){
          pii[colnames(pii) %in%  armleft[yy]]=0.1
        }else if ( pii[colnames(pii) %in%  armleft[yy]]>0.9){
          pii[colnames(pii) %in%  armleft[yy]]=0.9
        }
      }


      if (tpp==1){
        pii<-(pii^(jjj/(2*N2)))^tp
      }else if (tpp==0){
        pii<-pii^tp
      }
      pii<-pii/sum(pii)
      pii<-pii[ , order(names(pii))]
      armleft<-sort(armleft,decreasing = FALSE)

    }else if (jjj==N2){

      # return(list(sim111))

     # return(list(simout))
      if (any(simout[N1:(N2-1),2]<0.01)){
        aa<-NA
      }else{
        aa<-simout[N2,2]
      }
      return(aa)
    }
  }

}


##################### Simulations #####################
enrollratef<-c(0.1,0.5,0.9)
perctp<-0.5
perctt1<-c(0,0.1,0.2,0.3,0.4,0.5)
repn<-20000
sim11<-vector("list",length(enrollratef))
for (jj in (1:length(enrollratef))){
  seeds<-1:repn
  sim11[[jj]]<-lapply(1:repn,function(x) {
    set.seed(seeds[x])
    pop(vPatsPerMonth=10,nMaxQtyPats=50000,enrollrate1=enrollratef[jj])})
}


simnull1<-list()
##################

jj=1
simnull1[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=56,armn=2,h=c(0.15,0.15),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=552,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=56,deltaa=-0.03,tpp=0,deltaa1=0.1)

},mc.cores = 20)

jj=2
simnull1[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=56,armn=2,h=c(0.15,0.15),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=552,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=56,deltaa=-0.03,tpp=0,deltaa1=0.1)

},mc.cores = 20)


# simf1<-list()
# simf<-list()
# for (xx in 1:20000){
#   if (any(simnull1[[jj]][[xx]][[1]][56:551,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull1[[jj]][[xx]][[1]][552,2]
#   }
# }
# simf1[[jj]]<-do.call(rbind,simf)
#
# sum(is.na(simf1[[1]])) #195
# sum(simf1[[1]]>0.117,na.rm=T)/20000  #0.025
# sum(is.na(simf1[[2]])) #201
# sum(simf1[[2]]>0.3755,na.rm=T)/20000  #0.025



save(simnull1,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull1.Rdata')


##################
####0.1,0.3
simnull2<-list()
jj=1
simnull2[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=18,armn=2,h=c(0.2,0.2),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=168,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=18,deltaa=-0.027,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf2<-list()
# simf<-list()
# for (xx in 1:20000){
#   if (any(simnull2[[jj]][[xx]][[1]][18:167,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull2[[jj]][[xx]][[1]][168,2]
#   }
# }
# simf2[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf2[[1]])) #179
# sum(simf2[[1]]>0.683448,na.rm=T)/20000  #0.02495

save(simnull2,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull2.Rdata')


##################
####0.2,0.3
simnull3<-list()
jj=1
simnull3[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=82,armn=2,h=c(0.25,0.25),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=816,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=82,deltaa=-0.048,tpp=0,deltaa1=0.1)

},mc.cores = 20)

jj=2
simnull3[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=82,armn=2,h=c(0.25,0.25),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=816,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=82,deltaa=-0.048,tpp=0,deltaa1=0.1)

},mc.cores = 20)

jj=3
simnull3[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=82,armn=2,h=c(0.25,0.25),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=816,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=82,deltaa=-0.05,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf3<-list()
# simf<-list()
# for (xx in 1:20000){
#   if (any(simnull3[[jj]][[xx]][[1]][82:815,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull3[[jj]][[xx]][[1]][816,2]
#   }
# }
# simf3[[jj]]<-do.call(rbind,simf)
#
# sum(is.na(simf3[[1]])) #201
# sum(simf3[[1]]>0.1398,na.rm=T)/20000  #0.025
# sum(is.na(simf3[[2]])) #204
# sum(simf3[[2]]>0.23712,na.rm=T)/20000  #0.025
# sum(is.na(simf3[[3]])) #197
# sum(simf3[[3]]>0.4828,na.rm=T)/20000  #0.025

save(simnull3,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull3.Rdata')


##################
####0.2,0.4
simnull4<-list()
jj=1
simnull4[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=24,armn=2,h=c(0.3,0.3),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=224,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=24,deltaa=-0.05,tpp=0,deltaa1=0.1)

},mc.cores = 20)



# simf4<-list()
# simf<-list()
# for (xx in 1:20000){
#   if (any(simnull4[[jj]][[xx]][[1]][24:223,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull4[[jj]][[xx]][[1]][224,2]
#   }
# }
# simf4[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf4[[1]])) #189
# sum(simf4[[1]]>0.6797,na.rm=T)/20000  #0.025

save(simnull4,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull4.Rdata')


##################
####0.2,0.5
simnull5<-list()
jj=1
simnull5[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=10,armn=2,h=c(0.35,0.35),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=100,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=10,deltaa=-0.015,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf5<-list()
# for (xx in 1:20000){
#   if (any(simnull5[[jj]][[xx]][[1]][10:99,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull5[[jj]][[xx]][[1]][100,2]
#   }
# }
# simf5[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf5[[1]])) #193
# sum(simf5[[1]]>0.8436,na.rm=T)/20000  #0.02495


save(simnull5,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull5.Rdata')

##################
####0.3,0.4
simnull6<-list()
jj=1
simnull6[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=100,armn=2,h=c(0.35,0.35),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=992,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=100,deltaa=-0.055,tpp=0,deltaa1=0.1)

},mc.cores = 20)

jj=2
simnull6[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=100,armn=2,h=c(0.35,0.35),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=992,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=100,deltaa=-0.06,tpp=0,deltaa1=0.1)

},mc.cores = 20)

jj=3
simnull6[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=100,armn=2,h=c(0.35,0.35),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=992,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=100,deltaa=-0.062,tpp=0,deltaa1=0.1)

},mc.cores = 20)
# simf<-list()
# simf6<-list()
# for (xx in 1:20000){
#   if (any(simnull6[[jj]][[xx]][[1]][100:991,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull6[[jj]][[xx]][[1]][992,2]
#   }
# }
# simf6[[jj]]<-do.call(rbind,simf)
#
# sum(is.na(simf6[[1]])) #196
# sum(simf6[[1]]>0.2294,na.rm=T)/20000  #0.025
#
# sum(is.na(simf6[[2]])) #228
# sum(simf6[[2]]>0.208,na.rm=T)/20000  #0.025
#
# sum(is.na(simf6[[3]])) #206
# sum(simf6[[3]]>0.388,na.rm=T)/20000  #0.025

save(simnull6,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull6.Rdata')


##################
####0.3,0.5
simnull7<-list()
jj=1
simnull7[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=26,armn=2,h=c(0.4,0.4),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=256,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=26,deltaa=-0.058,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf7<-list()
# simf<-list()
# for (xx in 1:20000){
#   if (any(simnull7[[jj]][[xx]][[1]][26:255,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull7[[jj]][[xx]][[1]][256,2]
#   }
# }
# simf7[[jj]]<-do.call(rbind,simf)
#
# sum(is.na(simf7[[1]])) #234
# sum(simf7[[1]]>0.691,na.rm=T)/20000  #0.025

save(simnull7,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull7.Rdata')


##################
####0.3,0.6
simnull8<-list()
jj=1
simnull8[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=12,armn=2,h=c(0.45,0.45),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=114,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=12,deltaa=-0.035,tpp=0,deltaa1=0.1)

},mc.cores = 20)


# simf8<-list()
# for (xx in 1:20000){
#   if (any(simnull8[[jj]][[xx]][[1]][12:113,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull8[[jj]][[xx]][[1]][114,2]
#   }
# }
# simf8[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf8[[1]])) #203
# sum(simf8[[1]]>0.8524,na.rm=T)/20000  #0.025

save(simnull8,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull8.Rdata')


##################
####0.4,0.5
simnull9<-list()
jj=1
simnull9[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=108,armn=2,h=c(0.45,0.45),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=1080,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=108,deltaa=-0.06,tpp=0,deltaa1=0.1)

},mc.cores = 20)
jj=2
simnull9[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=108,armn=2,h=c(0.45,0.45),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=1080,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=108,deltaa=-0.064,tpp=0,deltaa1=0.1)

},mc.cores = 20)
jj=3
simnull9[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=108,armn=2,h=c(0.45,0.45),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=1080,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=108,deltaa=-0.067,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf9<-list()
# simf<-list()
# for (xx in 1:20000){
#   if (any(simnull9[[jj]][[xx]][[1]][108:1079,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull9[[jj]][[xx]][[1]][1080,2]
#   }
# }
# simf9[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf9[[1]])) #177
# sum(simf9[[1]]>0.1531,na.rm=T)/20000  #0.025
# sum(is.na(simf9[[2]])) #216
# sum(simf9[[2]]>0.216,na.rm=T)/20000  #0.025
# sum(is.na(simf9[[3]])) #189
# sum(simf9[[3]]>0.33982,na.rm=T)/20000  #0.025


save(simnull9,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull9.Rdata')


##################
####0.4,0.6
simnull10<-list()
jj=1
simnull10[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=28,armn=2,h=c(0.5,0.5),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=264,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=28,deltaa=-0.065,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf10<-list()
# for (xx in 1:20000){
#   if (any(simnull10[[jj]][[xx]][[1]][28:263,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull10[[jj]][[xx]][[1]][264,2]
#   }
# }
# simf10[[jj]]<-do.call(rbind,simf)
#
# sum(is.na(simf10[[1]])) #218
# sum(simf10[[1]]>0.7078,na.rm=T)/20000  #0.025


save(simnull10,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull10.Rdata')

#################
####0.4,0.7
simnull11<-list()
jj=1
simnull11[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=12,armn=2,h=c(0.55,0.55),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=114,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=12,deltaa=-0.035,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf11<-list()
# for (xx in 1:20000){
#   if (any(simnull11[[jj]][[xx]][[1]][12:113,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull11[[jj]][[xx]][[1]][114,2]
#   }
# }
# simf11[[jj]]<-do.call(rbind,simf)
#
# sum(is.na(simf11[[1]])) #201
# sum(simf11[[1]]>0.8492,na.rm=T)/20000  #0.025


save(simnull11,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull11.Rdata')

##################
####0.5,0.6
simnull12<-list()
jj=1
simnull12[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=108,armn=2,h=c(0.55,0.55),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=1080,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=108,deltaa=-0.06,tpp=0,deltaa1=0.1)

},mc.cores = 20)
jj=2
simnull12[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=108,armn=2,h=c(0.55,0.55),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=1080,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=108,deltaa=-0.068,tpp=0,deltaa1=0.1)

},mc.cores = 20)
jj=3
simnull12[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=108,armn=2,h=c(0.55,0.55),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=1080,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=108,deltaa=-0.068,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf<-list()
# simf12<-list()
# for (xx in 1:20000){
#   if (any(simnull12[[jj]][[xx]][[1]][108:1079,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull12[[jj]][[xx]][[1]][1080,2]
#   }
# }
# simf12[[jj]]<-do.call(rbind,simf)
#
# sum(is.na(simf12[[1]])) #202
# sum(simf12[[1]]>0.163,na.rm=T)/20000  #0.025
# sum(is.na(simf12[[2]])) #174
# sum(simf12[[2]]>0.219,na.rm=T)/20000  #0.025
# sum(is.na(simf12[[3]])) #175
# sum(simf12[[3]]>0.347,na.rm=T)/20000  #0.025

save(simnull12,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull12.Rdata')

##################
####0.5,0.7
simnull13<-list()
jj=1
simnull13[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=26,armn=2,h=c(0.6,0.6),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=256,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=26,deltaa=-0.057,tpp=0,deltaa1=0.1)

},mc.cores = 20)


# simf<-list()
# simf13<-list()
# for (xx in 1:20000){
#   if (any(simnull13[[jj]][[xx]][[1]][26:255,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull13[[jj]][[xx]][[1]][256,2]
#   }
# }
# simf13[[jj]]<-do.call(rbind,simf)
#
# sum(is.na(simf13[[1]])) #183
# sum(simf13[[1]]>0.721,na.rm=T)/20000  #0.025

save(simnull13,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull13.Rdata')

##################
####0.5,0.8
simnull14<-list()
jj=1
simnull14[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=10,armn=2,h=c(0.65,0.65),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=100,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=10,deltaa=-0.007,tpp=0,deltaa1=0.1)

},mc.cores = 20)


# simf<-list()
# simf14<-list()
# for (xx in 1:20000){
#   if (any(simnull14[[jj]][[xx]][[1]][10:99,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull14[[jj]][[xx]][[1]][100,2]
#   }
# }
# simf14[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf14[[1]])) #227
# sum(simf14[[1]]>0.8446,na.rm=T)/20000  #0.025


save(simnull14,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull14.Rdata')

##################
####0.6,0.7
simnull15<-list()
jj=1
simnull15[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=100,armn=2,h=c(0.65,0.65),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=992,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=100,deltaa=-0.055,tpp=0,deltaa1=0.1)

},mc.cores = 20)
jj=2
simnull15[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=100,armn=2,h=c(0.65,0.65),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=992,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=100,deltaa=-0.055,tpp=0,deltaa1=0.1)

},mc.cores = 20)

jj=3
simnull15[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=100,armn=2,h=c(0.65,0.65),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=992,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=100,deltaa=-0.058,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf<-list()
# simf15<-list()
# for (xx in 1:20000){
#   if (any(simnull15[[jj]][[xx]][[1]][100:991,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull15[[jj]][[xx]][[1]][992,2]
#   }
# }
# simf15[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf15[[1]])) #213
# sum(simf15[[1]]>0.1772,na.rm=T)/20000  #0.025
# sum(is.na(simf15[[2]])) #219
# sum(simf15[[2]]>0.24045,na.rm=T)/20000  #0.025
# sum(is.na(simf15[[3]])) #203
# sum(simf15[[3]]>0.373,na.rm=T)/20000  #0.025


save(simnull15,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull15.Rdata')

##################
####0.6,0.8
simnull16<-list()
jj=1
simnull16[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=24,armn=2,h=c(0.7,0.7),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=224,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=24,deltaa=-0.048,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf16<-list()
# simf<-list()
# for (xx in 1:20000){
#   if (any(simnull16[[jj]][[xx]][[1]][24:223,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull16[[jj]][[xx]][[1]][224,2]
#   }
# }
# simf16[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf16[[1]])) #192
# sum(simf16[[1]]>0.7299,na.rm=T)/20000  #0.025


save(simnull16,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull16.Rdata')

##################
####0.7,0.8
simnull17<-list()
jj=1
simnull17[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=82,armn=2,h=c(0.75,0.75),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=816,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=82,deltaa=-0.048,tpp=0,deltaa1=0.1)

},mc.cores = 20)
jj=2
simnull17[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=82,armn=2,h=c(0.75,0.75),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=816,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=82,deltaa=-0.045,tpp=0,deltaa1=0.1)

},mc.cores = 20)
jj=3
simnull17[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=82,armn=2,h=c(0.75,0.75),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=816,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=82,deltaa=-0.045,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf17<-list()
# simf<-list()
#
# for (xx in 1:20000){
#   if (any(simnull17[[jj]][[xx]][[1]][82:815,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull17[[jj]][[xx]][[1]][816,2]
#   }
# }
# simf17[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf17[[1]])) #198
# sum(simf17[[1]]>0.194,na.rm=T)/20000  #0.025
# sum(is.na(simf17[[2]])) #222
# sum(simf17[[2]]>0.2693,na.rm=T)/20000  #0.025
# sum(is.na(simf17[[3]])) #196
# sum(simf17[[3]]>0.49805,na.rm=T)/20000  #0.025

save(simnull17,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull17.Rdata')

##################
####0.7,0.9
simnull18<-list()
jj=1
simnull18[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=18,armn=2,h=c(0.8,0.8),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=168,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=18,deltaa=-0.023,tpp=0,deltaa1=0.1)

},mc.cores = 20)


# simf18<-list()
# simf<-list()
#
# for (xx in 1:20000){
#   if (any(simnull18[[jj]][[xx]][[1]][18:167,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull18[[jj]][[xx]][[1]][168,2]
#   }
# }
# simf18[[jj]]<-do.call(rbind,simf)
#
#
# sum(is.na(simf18[[1]])) #218
# sum(simf18[[1]]>0.7345,na.rm=T)/20000  #0.025


save(simnull18,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull18.Rdata')

##################
####0.8,0.9
simnull19<-list()
jj=1
simnull19[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=56,armn=2,h=c(0.85,0.85),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=552,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=56,deltaa=-0.035,tpp=0,deltaa1=0.1)

},mc.cores = 20)
jj=2
simnull19[[jj]]<-parallel::mclapply(1:repn,function(x) {
  brarfun(jj=jj,x=x,N1=56,armn=2,h=c(0.85,0.85),vTimeToOutcome1=expression(rnorm( length( vStartTime ),60, 3)),
          N2=552,tp=0.5,armlabel=c(1, 2),blocksize=4,
          alpha1=2,beta1=3,alpha2=2,beta2=3,alpha3=2,beta3=3,alpha4=2,beta4=3,alpha5=2,beta5=3,
          minstart=56,deltaa=-0.023,tpp=0,deltaa1=0.1)

},mc.cores = 20)

# simf19<-list()
# simf<-list()
#
# for (xx in 1:20000){
#   if (any(simnull19[[jj]][[xx]][[1]][56:551,2]<0.01)){
#     simf[[xx]]<-NA
#   }  else{
#     simf[[xx]]<-simnull19[[jj]][[xx]][[1]][552,2]
#   }
# }
# simf19[[jj]]<-do.call(rbind,simf)
#
#
#
# sum(is.na(simf19[[1]])) #205
# sum(simf19[[1]]>0.2367,na.rm=T)/20000  #0.025
# sum(is.na(simf19[[2]])) #209
# sum(simf19[[2]]>0.378,na.rm=T)/20000  #0.025

save(simnull19,file='/home/cxu870/UNI_HOME/binary/BRAR/two_arms/diff_0_1/delayed_response_2/beta_2_3/turning_parameters_0_5/simnull19.Rdata')
